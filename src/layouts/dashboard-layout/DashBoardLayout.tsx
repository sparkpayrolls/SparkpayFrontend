import Image from 'next/image';
import Link from 'next/link';
import Head from 'next/head';
import Logo from '../../../public/svgs/logo.svg';
import { ReactNode, useState } from 'react';
import {
  OrganizationsMenu,
  ProfileMenu,
} from '@/components/KebabMenu/KebabMenu.component';
import { useAppDispatch, useAppSelector } from 'src/redux/hooks';
import { IImageLoader } from '@/components/types';
import { Administrator, Company, Role } from 'src/api/types';
import { HttpError } from 'src/api/repo/http.error';
import { toast } from 'react-toastify';
import { $api } from 'src/api';
import { refreshCompanies } from 'src/redux/slices/companies/companies.slice';
import { logOut } from 'src/redux/slices/user/user.slice';
import { commitAministrator } from 'src/redux/slices/administrator/administrator.slice';
import { NavList } from './dashboard-navigation-list';

interface Props {
  children?: ReactNode;
  pageTitle: string;
}

// eslint-disable-next-line no-undef
const DashboardLayout: React.FC<Props> = ({ children, pageTitle }: Props) => {
  const companies = useAppSelector((state) => state.companies);
  const selectedCompany = companies.find((company) => company.selected);
  const user = useAppSelector((state) => state.user);
  const dispatch = useAppDispatch();
  const [loadingCompanySelect, setLoadingCompanySelect] = useState('');

  const handleSelect = async (
    administrator: Administrator,
    close: () => void,
  ) => {
    try {
      const company = administrator.company as Company;
      setLoadingCompanySelect(company.id);
      if (administrator.selected) {
        await $api.company.unselectCompany(company.id);
        dispatch(commitAministrator(null));
      } else {
        await $api.company.selectCompany(company.id);
      }
      await refreshCompanies(dispatch);
    } catch (error) {
      const err = error as HttpError;
      toast.error(`error toggling company - ${err.message}`);
    } finally {
      setLoadingCompanySelect('');
      setTimeout(close, 500);
    }
  };

  return (
    <>
      <Head>
        <title>{pageTitle}</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <div className="dashboardLayout">
        <nav className="dashboard-navigation">
          <Link href="/">
            <a className="dashboard-navigation__brand">
              <Image src={Logo} alt="logo" />
            </a>
          </Link>

          <NavList />

          <div className="dashboard-navigation__profile">
            <ProfileMenu
              name={`${user?.firstname} ${user?.lastname}`}
              role={
                selectedCompany?.isRoot
                  ? 'Owner'
                  : (selectedCompany?.role as Role)?.name
              }
              avatar={user?.avatar}
              actions={[
                { name: 'Profile', href: '/profile' },
                {
                  name: 'Logout',
                  action() {
                    logOut(dispatch);
                  },
                },
              ]}
            />
          </div>
        </nav>

        <div className="dashboardLayout__top-bar">
          <OrganizationsMenu
            companies={companies}
            onSelect={handleSelect}
            loading={loadingCompanySelect}
          />
        </div>

        <main className="dashboardLayout__body">{children}</main>
      </div>
    </>
  );
};

export default DashboardLayout;

export const ImageLoader = (props: IImageLoader) => {
  return (
    <Image
      loader={(props) => `${props.src}?width=${props.width}`}
      src={props.src}
      alt={props.alt}
      width={props.width}
      height={props.height}
    />
  );
};
