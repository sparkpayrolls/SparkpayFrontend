import { NextPage } from 'next';
// import Image from 'next/image';
import Head from 'next/head';
// import SearchInput from '../../../public/svgs/search.svg';
// import Filter from '../../../public/svgs/filter.svg';
// import EmployeeInfo from '../../../public/svgs/employeeIcon.svg';
// import Inbox from '../../../public/svgs/employee-inbox.svg';
import { Table, TR } from '../../src/components/Table/Table.component';
import { useCallback, useState, useEffect } from 'react';
import { PaginationMeta } from 'src/api/types';
import { toast } from 'react-toastify';
import Image from 'next/image';
import backicon from '../../public/svgs/backicon.svg';
import { Button } from '../../src/components/Button/Button.component';




const names = [
  { firstname: 'Tomike', lastname: 'Peter' },
  { firstname: 'Christianah', lastname: 'Peter' },
  { firstname: 'Opeyemi', lastname: 'Peter' },
  { firstname: 'Emmanuel', lastname: 'Menyaga' },
  { firstname: 'Ojonugwa', lastname: 'Alikali' },
];
const emps = new Array(200).fill(null).map(() => {
  const name = names[Math.floor(names.length * Math.random())];

  return {
    id: String(Math.random() * 1000000),
    name: `${name.firstname} ${name.lastname}`,
    email: `${name.firstname.toLowerCase()}@sparkpayhq.com`,
    amount: Number((Math.random() * 1000000).toFixed(2)).toLocaleString(),
    payoutMethod: 'Bank Transfer',
    date: new Date().toISOString(),
    groups: [{ name: 'Group 1' }, { name: 'Group 2' }],
  };
});
const getEmployees = (page = 1, perPage = 10, search = '') => {
  let empClone = emps;
  if (search) {
    empClone = empClone.filter((emp) => {
      return new RegExp(search, 'gi').test(emp.name);
    });
  }

  const pageCount = Math.ceil((empClone.length || 1) / perPage);
  const hasPrevPage = page > 1 && empClone.length >= 1;
  const hasNextPage = page < pageCount;

  return {
    data: empClone.slice((page - 1) * perPage, perPage * page),
    meta: {
      total: empClone.length,
      perPage,
      pageCount,
      page,
      pagingCounter: 1,
      hasNextPage,
      hasPrevPage,
      previousPage: hasPrevPage ? page - 1 : null,
      nextPage: hasNextPage ? page + 1 : null,
    },
  };
};

const EmployeeTabMini: NextPage = () => {
  const [selected, setSelected] = useState<string[]>([]);
  const [employees, setEmployees] = useState<typeof emps>([]);
  const [paginationMeta, setPaginationMeta] = useState<PaginationMeta>({
    total: 0,
    perPage: 10,
    pageCount: 0,
    page: 1,
    pagingCounter: 1,
    hasNextPage: false,
    hasPrevPage: false,
    previousPage: null,
    nextPage: null,
  });

  const refreshEmployees = useCallback(
    (page = 1, perPage = 7, search = '') => {
      const res = getEmployees(page, perPage, search);
      setEmployees(res.data);
      setPaginationMeta(res.meta);
    },
    [setEmployees],
  );

  useEffect(() => {
    refreshEmployees();
  }, [refreshEmployees]);

  return (
    <>
    <div className="payroll-details">
      <Head>
        <title>payroll-wallet</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="payroll-details__sidebar"></div>
      <main className="payroll-details__payroll-main">
      <section className="payroll-details__header-section">
        <Image
          src={backicon}
          alt="back-icon-image"
          className="payroll-details__back-icon"
        />
        <div className="payroll-details__title-container">
          <div>
            <h5 className="payroll-details__summary-header">
              Payroll{' '}
              <span className="payroll-details__payroll-span-text">
                (wallet balance ₦ 120,000)
              </span>{' '}
            </h5>
          </div>
          <Button
            label={<>{'Proceed'}</>}
            onClick={() => {}}
            className="payroll-details__proceed-btn"
            primary
            type="submit"
          />
        </div>
      </section>
       <div className="employee-section">
         <Table
          headerRow={[
            'Name',
            'Email Address',
            'Amount (₦)',
            'Payout Method',
            'Group',
            'Date Added',
          ]}
          allChecked={
            !!selected.length &&
            employees.every((employee) => selected.includes(employee.id))
          }
          onCheckAllClick={() => {
            if (selected.length === employees.length) {
              setSelected([]);
              return;
            }
            setSelected(employees.map((employee) => employee.id));
          }}
          paginationMeta={paginationMeta}
          refresh={refreshEmployees}
          title={`(${paginationMeta.total}) Kings and Queens`}
          onFilterClick={() => toast.success('closest thing to a filter modal')}
        >
          {() => {
            return (
              <tbody>
                {employees.map((employee) => {
                  return (
                    <TR
                      key={employee.id}
                      checked={selected.includes(employee.id)}
                      onChange={() => {
                        if (selected.includes(employee.id)) {
                          setSelected(
                            selected.filter((sel) => sel !== employee.id),
                          );
                          return;
                        }

                        setSelected([...selected, employee.id]);
                      }}
                    >
                      <td>{employee.name}</td>
                      <td>{employee.email}</td>
                      <td>{employee.amount}</td>
                      <td>{employee.payoutMethod}</td>
                      <td>
                        {employee.groups.map((group) => group.name).join(', ')}
                      </td>
                      <td>{employee.date}</td>
                    </TR>
                  );
                })}
              </tbody>
            );
          }}
        </Table>
      </div>
      </main>
    </div>
    </> 
  );
};
export default EmployeeTabMini;


