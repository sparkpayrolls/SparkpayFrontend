import { EmployeeOnboardingForm } from '@/components/Employee/onboardingform.component';
import { IF } from '@/components/Misc/if.component';
import { NotFound } from '@/components/Misc/not-found.component';
import { EmployeeOnboarding } from '@/components/types';
import { FormikHelpers } from 'formik';
import { NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useCallback, useEffect, useState } from 'react';
import { toast } from 'react-toastify';
import { $api } from 'src/api';
import { HttpError } from 'src/api/repo/http.error';
import { Employee } from 'src/api/types';
import useApiCall from 'src/helpers/hooks/useapicall.hook';

const EmployeeOnboard: NextPage = () => {
  const router = useRouter();
  const [employee, setEmployee] = useState<Employee>();
  const [loading, apiCallStarted, apiCallDone] = useApiCall();
  const [notFound, setNotFound] = useState(false);

  const token = (router.query.code as string) || ' ';

  const getEmployee = useCallback(async () => {
    if (token === ' ') {
      return;
    }
    try {
      apiCallStarted();
      const employee = await $api.employee.getSingleEmployeeByToken(token);
      setEmployee(employee);
    } catch (error) {
      const err = error as HttpError;
      if (err.status === 400) {
        setNotFound(true);
      }
    } finally {
      apiCallDone();
    }
  }, [token, apiCallStarted, apiCallDone]);

  const handleSugmit = async (
    values: EmployeeOnboarding,
    helpers: FormikHelpers<EmployeeOnboarding>,
  ) => {
    try {
      helpers.setSubmitting(true);
      await $api.employee.completeEmployeeOnboarding({
        token,
        ...values,
      });
      toast.success('onboarding successful');
      setTimeout(router.push, 1500, '/');
    } catch (error) {
      const err = error as HttpError;
      toast.error(err.message);
    } finally {
      helpers.setSubmitting(false);
    }
  };

  useEffect(() => {
    getEmployee();
  }, [getEmployee]);

  return (
    <div className="employee-onboard">
      <Head>
        <title>Employee Onboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <IF condition={notFound}>
        <div className="employee-onboard__not-found">
          <NotFound message="Onboarding code not found" />
        </div>
      </IF>
      <div className="employee-onboard__section">
        <IF condition={!notFound}>
          <h1 className="employee-onboard__title">Employee Onboarding</h1>
          <p className="employee-onboard__subtext">
            {' '}
            Enter your details to complete your onboarding{' '}
          </p>
          <IF condition={!!employee}>
            <EmployeeOnboardingForm
              onSubmit={handleSugmit}
              initialValue={{
                country: (employee?.country || '') as string,
                payoutMethod: (employee?.payoutMethod || '') as string,
                payoutMethodMeta: employee?.payoutMethodMeta as any,
              }}
              loading={loading}
            />
            <div className="employee-onboard__sign-up">
              <p className="employee-onboard__sign-up-text">
                Please ensure your details are correct before submitting.
              </p>
            </div>
          </IF>
        </IF>
      </div>
    </div>
  );
};
export default EmployeeOnboard;
