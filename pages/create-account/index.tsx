/* eslint-disable no-unused-vars */
import { NextPage } from 'next';
import Head from 'next/head';
import React, { ChangeEvent, useEffect, useState } from 'react';
import { Formik, FormikHelpers, FormikProps } from 'formik';
import * as Yup from 'yup';
import { Button } from '../../src/components/Button/Button';
import { Input } from '../../src/components/Input/Input';
import {
  createAccountFailure,
  createAccountPending,
  createAccountSuccess,
} from './createAccountSlice';
import { useAppDispatch, useAppSelector } from 'src/redux/hooks';
import { $api } from 'src/api';
import Cookies from 'js-cookie';
import { HttpError } from 'src/api/repo/http.error';
import Link from 'next/link';
import { toast } from 'react-toastify';
import { Country } from 'src/api/types';
import { useRouter } from 'next/router';
import { Util } from 'src/helpers/util';

interface ISignUpForm {
  firstname: string;
  lastname: string;
  country: string;
  email: string;
  password: string;
}

interface ihandleChange {
  (e: ChangeEvent<any>): void;
  <T = string | ChangeEvent<any>>(field: T): T extends ChangeEvent<any>
    ? void
    : (e: string | ChangeEvent<any>) => void;
}

const signupValidationSchema = Yup.object().shape({
  firstname: Yup.string().required('firstname is required'),
  lastname: Yup.string().required('lastname is required'),
  country: Yup.string().required('country is required'),
  email: Yup.string()
    .email('Please enter valid email')
    .required('email is required'),
  password: Yup.string().required(
    'Please valid password. One uppercase, one lowercase, one special character and no spaces',
  ),
});

const deboucedEmailCheck = Util.debounce(
  $api.auth.emailTaken.bind($api.auth),
  1000,
);

const CreateAccount: NextPage = () => {
  const Router = useRouter();
  const dispatch = useAppDispatch();
  const { loading, error } = useAppSelector((state) => state.createAccount);
  const [busy, setBusy] = useState(true);
  const [countries, setCountries] = useState<Country[]>([]);

  useEffect(() => {
    if (error) {
      toast.error(error, { delay: 1000 });
    }
  }, [error]);

  useEffect(() => {
    $api.country
      .getCountries({ all: true })
      .then(({ data: countries }) => {
        setCountries(countries);
      })
      .catch(console.debug)
      .finally(() => {
        setBusy(false);
      });
  }, [setCountries]);

  const onEmailChange = async (email: string) => {
    setBusy(true);
    try {
      const emailTaken = await deboucedEmailCheck(email);
      if (emailTaken) {
        dispatch(createAccountFailure('email already exists'));
      }
    } catch (error) {
      console.debug('...error checking if email taken');
    } finally {
      setBusy(false);
    }
  };

  const handleEmailInput = (
    e: ChangeEvent<HTMLInputElement | HTMLSelectElement>,
    handleChange: ihandleChange,
  ) => {
    const { value } = e.target;

    onEmailChange(value);

    handleChange(e);
  };

  const onSubmit = async (
    values: ISignUpForm,
    actions: FormikHelpers<ISignUpForm>,
  ) => {
    dispatch(createAccountPending());
    // console.log(values, actions);

    try {
      const loggedinUser = await $api.auth.signup(values);
      Cookies.set('auth_token', loggedinUser.token);
      dispatch(createAccountSuccess(loggedinUser.user));
      Router.replace('/check-inbox');
    } catch (error) {
      const err = error as HttpError;
      if (err.status === 422) {
        // setErrors({ ...errors, signup: { ...errors.signup, ...err.errors } });
        dispatch(createAccountFailure(err.message));
        return;
      }
    }

    actions.setSubmitting(false);
  };

  return (
    <div className="create-account">
      <Head>
        <title>Create Account</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="create-account__content">
        <h1 className="create-account__title">Create Account</h1>
        <p className="create-account__subtext">
          Enter your details to create a free account
        </p>

        <Formik
          initialValues={{
            firstname: '',
            lastname: '',
            country: '',
            email: '',
            password: '',
          }}
          onSubmit={onSubmit}
          validationSchema={signupValidationSchema}
        >
          {(props: FormikProps<ISignUpForm>) => {
            const {
              values,
              touched,
              errors,
              handleBlur,
              handleChange,
              handleSubmit,
              isSubmitting,
            } = props;
            return (
              <form onSubmit={handleSubmit}>
                <div className="create-account__form-input-area">
                  <div className="create-account__form-grid">
                    <Input
                      type="text"
                      label="First Name"
                      placeholder="First Name"
                      name="firstname"
                      value={values.firstname}
                      onChange={handleChange}
                      onBlur={handleBlur}
                      hasError={errors.firstname && touched.firstname}
                      error={errors.firstname}
                    />

                    <Input
                      type="text"
                      label="Last Name"
                      placeholder="Last Name"
                      name="lastname"
                      value={values.lastname}
                      onChange={handleChange}
                      onBlur={handleBlur}
                      hasError={errors.lastname && touched.lastname}
                      error={errors.lastname}
                    />
                  </div>

                  <Input
                    type="email"
                    label="Email Address"
                    placeholder="Email Address"
                    name="email"
                    value={values.email}
                    onChange={(
                      e: ChangeEvent<HTMLInputElement | HTMLSelectElement>,
                    ) => handleEmailInput(e, handleChange)}
                    onBlur={handleBlur}
                    hasError={errors.email && touched.email}
                    error={errors.email}
                  />

                  {/* <Input
                    type="text"
                    label="Country"
                    placeholder="Country"
                    name="country"
                    value={values.country}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    hasError={errors.country && touched.country}
                    error={errors.country}
                  /> */}

                  {countries.length > 0 ? (
                    <select
                      name="country"
                      onChange={handleChange}
                      onBlur={handleBlur}
                      value={values.country}
                    >
                      <option value="">country</option>
                      {countries.map((country) => {
                        return (
                          <option key={country.id} value={country.id}>
                            {country.name}
                          </option>
                        );
                      })}
                    </select>
                  ) : null}

                  <Input
                    type="password"
                    label="Password"
                    placeholder="password"
                    name="password"
                    value={values.password}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    hasError={errors.password && touched.password}
                    error={errors.password}
                  />
                </div>

                <Button
                  type="submit"
                  label="Create Account"
                  onClick={() => {}}
                  className="create-account__submit-btn"
                  primary
                  disabled={isSubmitting || busy}
                  showSpinner={loading}
                />
              </form>
            );
          }}
        </Formik>

        <div className="create-account__have-an-account-section">
          <p className="create-account__have-an-account-text">
            Already have an account?{' '}
            <Link href="/login">
              <a className="create-account__span-text"> Log In</a>
            </Link>
          </p>
          <p className="create-account__terms-and-conditions">
            By creating an account, you have agreed to our <br />{' '}
            <strong className="create-account__span-text underline-text">
              Terms
            </strong>{' '}
            and{' '}
            <strong className="create-account__span-text underline-text ">
              conditions
            </strong>
          </p>
        </div>
      </div>
    </div>
  );
};
export default CreateAccount;
