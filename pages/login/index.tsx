import { NextPage } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { Formik, FormikHelpers, FormikProps } from 'formik';
import * as Yup from 'yup';
import { Button } from '../../src/components/Button/Button';
import { Input } from '../../src/components/Input/Input';
import { useRouter } from 'next/router';
import { useEffect } from 'react';
import { $api } from 'src/api';
import { useAppDispatch, useAppSelector } from 'src/redux/hooks';
import { loginFailure, loginPending, loginSuccess } from './loginSlice';
import Cookies from 'js-cookie';
import { toast } from 'react-toastify';

interface ISignInForm {
  email: string;
  password: string;
}

const loginValidationSchema = Yup.object().shape({
  email: Yup.string()
    .email('Please enter valid email')
    .required('email is required'),
  password: Yup.string().required(
    'Please valid password. One uppercase, one lowercase, one special character and no spaces',
  ),
});

const Login: NextPage = () => {
  const Router = useRouter();
  const dispatch = useAppDispatch();
  const { authenticated, loading } = useAppSelector((state) => state.login);

  useEffect(() => {
    const authToken = Cookies.get('auth_token') as string;
    if (authToken && !authenticated) {
      dispatch(loginSuccess);
      $api.$axios.defaults.headers.Authorization = `Bearer ${authToken}`;
      $api.user
        .getProfile()
        .then((user) => {
          dispatch(loginSuccess(user));
        })
        .catch((error) => {
          dispatch(loginFailure(error.message));
          Cookies.remove('auth_token');
        });
    }

    const authinterceptor = $api.$axios.interceptors.response.use((res) => {
      if (res.status === 401) {
        Cookies.remove('auth_token');
        // setIsLoggedIn(false);
      }
      return res;
    });

    return () => {
      $api.$axios.interceptors.response.eject(authinterceptor);
    };
  }, [authenticated, dispatch]);

  // useEffect(() => {}, [error]);

  const onSubmit = async (
    values: ISignInForm,
    actions: FormikHelpers<ISignInForm>,
  ) => {
    dispatch(loginPending());
    // console.log(values, actions);

    const { email: username, password } = values;

    try {
      const loggedinUser = await $api.auth.login(username, password);
      Cookies.set('auth_token', loggedinUser.token);
      dispatch(loginSuccess(loggedinUser.user));
      Router.replace(Router.query.goto ? `${Router.query.goto}` : '/dashboard');
    } catch (error: any) {
      dispatch(loginFailure(error.message));
      toast.error(error.message);
    }
    actions.setSubmitting(false);
  };

  // TODO -  Show error where appropriate

  return (
    <div className="login-account">
      <Head>
        <title>Log In</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>
      <div className="login-account__section">
        <h1 className="login-account__title">Log In</h1>
        <p className="login-account__subtext">
          Enter your email &amp; password to login
        </p>

        <Formik
          initialValues={{
            email: '',
            password: '',
          }}
          onSubmit={onSubmit}
          validationSchema={loginValidationSchema}
        >
          {(props: FormikProps<ISignInForm>) => {
            const {
              values,
              touched,
              errors,
              handleBlur,
              handleChange,
              handleSubmit,
              isSubmitting,
            } = props;
            return (
              <form onSubmit={handleSubmit}>
                <div className="login-account__form-input-section">
                  <div className="login-account__form-grid">
                    <Input
                      type="email"
                      label="Email Address"
                      placeholder="Email Address"
                      name="email"
                      value={values.email}
                      onChange={handleChange}
                      onBlur={handleBlur}
                      hasError={errors.email && touched.email}
                      error={errors.email}
                    />
                  </div>

                  <Input
                    type="password"
                    label="Password"
                    placeholder="password"
                    name="password"
                    value={values.password}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    hasError={errors.password && touched.password}
                    error={errors.password}
                  />
                </div>
                <div className="login-account__forgot-password">
                  <Link href="/forgot-password">
                    <a className="login-account__forgot-password-title">
                      Forgot Password?
                    </a>
                  </Link>
                </div>

                <Button
                  label="Log In"
                  type="submit"
                  onClick={() => {}}
                  className="login-account__submit-btn"
                  primary
                  showSpinner={loading}
                  disabled={isSubmitting}
                />
              </form>
            );
          }}
        </Formik>
        <div className="login-account__sign-up">
          <p className="login-account__sign-up-text">
            Donâ€™t have an account?
            <Link href="/create-account">
              <a className="login-account__span-text"> Create Account</a>
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Login;
