import { NextPage } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import Image from 'next/image';
import { Formik, FormikHelpers, FormikProps } from 'formik';
import { Button } from '../../src/components/Button/Button.component';
import { InputV2 } from '../../src/components/Input/Input.component';
import { useRouter } from 'next/router';
import { $api } from 'src/api';
import { useAppDispatch, useAppSelector } from 'src/redux/hooks';
import Cookies from 'js-cookie';
import { toast } from 'react-toastify';
import { loginValidationSchema } from 'src/helpers/validation';
import { commitUser } from 'src/redux/slices/user/user.slice';
import auth_frame from '../../public/svgs/auth-frame.svg';
import logo_white from '../../public/svgs/logo-white.svg';
import logo from '../../public/svgs/logo.svg';

interface ISignInForm {
  email: string;
  password: string;
}

const Login: NextPage = () => {
  const router = useRouter();
  const dispatch = useAppDispatch();
  const { user } = useAppSelector((state) => state);

  const goto = router.query.goto as string;
  const isLoggedIn = !!user;
  if (isLoggedIn) {
    router.replace(goto ? goto : '/organisations');
    return null;
  }

  const onSubmit = async (
    values: ISignInForm,
    actions: FormikHelpers<ISignInForm>,
  ) => {
    try {
      actions.setSubmitting(true);

      const { email: username, password } = values;
      const { user, token } = await $api.auth.login(username, password);
      Cookies.set('auth_token', token);
      dispatch(commitUser(user));
    } catch (error: any) {
      toast.error(error.message, { delay: 1000 });
    } finally {
      actions.setSubmitting(false);
    }
  };

  return (
    <div className="login">
      <Head>
        <title>Log In</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>
      <div className="login__side-info">
        <Link href="/">
          <a className="login__side-info--logo">
            <Image src={logo_white} alt="logo" />
          </a>
        </Link>

        <div className="login__side-info--graphics">
          <Image src={auth_frame} alt="graphics svg" />
        </div>

        <div className="login__side-info--txt-area">
          <h3 className="login__side-info--text">
            Lorem ipsum dolor sit amet, consectetur.
          </h3>
          <p className="login__side-info--subtext">
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Dui est eu
            ante purus.
          </p>
        </div>
        <div className="login__side-info--gradient"></div>
        <div className="login__side-info--ellipse"></div>
      </div>

      <div className="login__container">
        <div className="login__section">
          <Link href="/">
            <a className="login__section--logo">
              <Image src={logo} alt="logo" />
            </a>
          </Link>

          <h1 className="login__title">Log In</h1>
          <p className="login__subtext">
            Enter your email &amp; password to login
          </p>

          <Formik
            initialValues={{
              email: '',
              password: '',
            }}
            onSubmit={onSubmit}
            validationSchema={loginValidationSchema}
          >
            {(props: FormikProps<ISignInForm>) => {
              const {
                values,
                touched,
                errors,
                handleBlur,
                handleChange,
                handleSubmit,
                isSubmitting,
              } = props;
              return (
                <form onSubmit={handleSubmit}>
                  <div className="login__form-input-section">
                    <div className="login__form-grid">
                      <InputV2
                        type="email"
                        label="Email Address"
                        name="email"
                        value={values.email}
                        onChange={handleChange}
                        onBlur={handleBlur}
                        error={touched.email && errors.email}
                      />
                    </div>

                    <InputV2
                      type="password"
                      label="Password"
                      name="password"
                      value={values.password}
                      onChange={handleChange}
                      onBlur={handleBlur}
                      showVisibilityToggle
                      hideValue
                      error={touched.password && errors.password}
                    />
                  </div>
                  <div className="login__forgot-password">
                    <Link href="/forgot-password">
                      <a className="login__forgot-password-title">
                        Forgot Password?
                      </a>
                    </Link>
                  </div>

                  <Button
                    label="Log In"
                    type="submit"
                    className="login__submit-btn"
                    primary
                    showSpinner={isSubmitting}
                    disabled={isSubmitting}
                  />
                </form>
              );
            }}
          </Formik>
          <div className="login__sign-up">
            <p className="login__sign-up-text">
              Donâ€™t have an account?
              <Link href="/create-account">
                <a className="login__span-text"> Create Account</a>
              </Link>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Login;
