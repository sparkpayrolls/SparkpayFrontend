import { NextPage } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { Formik, FormikHelpers, FormikProps } from 'formik';
import { Button } from '/src/components/Button/Button';
import { Input } from '/src/components/Input/Input';
import { useRouter } from 'next/router';
import { $api } from 'src/api';
import { useAppDispatch, useAppSelector } from 'src/redux/hooks';
import Cookies from 'js-cookie';
import { toast } from 'react-toastify';
import { loginValidationSchema } from 'src/helpers/validation';
import { commitUser } from 'src/redux/slices/user/user.slice';

interface ISignInForm {
  email: string;
  password: string;
}

const Login: NextPage = () => {
  const router = useRouter();
  const dispatch = useAppDispatch();
  const { user } = useAppSelector((state) => state);

  const goto = router.query.goto as string;
  const isLoggedIn = !!user;
  if (isLoggedIn) {
    router.replace(goto ? goto : '/');
    return null;
  }

  const onSubmit = async (
    values: ISignInForm,
    actions: FormikHelpers<ISignInForm>,
  ) => {
    try {
      actions.setSubmitting(true);

      const { email: username, password } = values;
      const { user, token } = await $api.auth.login(username, password);
      Cookies.set('auth_token', token);
      dispatch(commitUser(user));
    } catch (error: any) {
      toast.error(error.message, { delay: 1000 });
    } finally {
      actions.setSubmitting(false);
    }
  };

  return (
    <div className="login-account">
      <Head>
        <title>Log In</title>
        {/* <meta name="description" content="Generated by create next app" /> */}
        {/* <link rel="icon" href="/favicon.ico" /> */}
      </Head>
      <div className="login-account__section">
        <h1 className="login-account__title">Log In</h1>
        <p className="login-account__subtext">
          Enter your email &amp; password to login
        </p>

        <Formik
          initialValues={{
            email: '',
            password: '',
          }}
          onSubmit={onSubmit}
          validationSchema={loginValidationSchema}
        >
          {(props: FormikProps<ISignInForm>) => {
            const {
              values,
              touched,
              errors,
              handleBlur,
              handleChange,
              handleSubmit,
              isSubmitting,
            } = props;
            return (
              <form onSubmit={handleSubmit}>
                <div className="login-account__form-input-section">
                  <div className="login-account__form-grid">
                    <Input
                      type="email"
                      label="Email Address"
                      placeholder="Email Address"
                      name="email"
                      value={values.email}
                      onChange={handleChange}
                      onBlur={handleBlur}
                      hasError={errors.email && touched.email}
                      error={errors.email}
                    />
                  </div>

                  <Input
                    type="password"
                    label="Password"
                    placeholder="password"
                    name="password"
                    value={values.password}
                    onChange={handleChange}
                    onBlur={handleBlur}
                    hasError={errors.password && touched.password}
                    error={errors.password}
                  />
                </div>
                <div className="login-account__forgot-password">
                  <Link href="/forgot-password">
                    <a className="login-account__forgot-password-title">
                      Forgot Password?
                    </a>
                  </Link>
                </div>

                <Button
                  label="Log In"
                  type="submit"
                  className="login-account__submit-btn"
                  primary
                  showSpinner={isSubmitting}
                  disabled={isSubmitting}
                />
              </form>
            );
          }}
        </Formik>
        <div className="login-account__sign-up">
          <p className="login-account__sign-up-text">
            Donâ€™t have an account?
            <Link href="/create-account">
              <a className="login-account__span-text"> Create Account</a>
            </Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Login;
